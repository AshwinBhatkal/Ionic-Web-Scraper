[
{"Ionic Tutorial": "Ionic is open source framework used for developing mobile applications. It provides tools and services for building Mobile UI with native look and feel. Ionic framework needs native wrapper to be able to run on mobile devices. This is an introductory tutorial, which covers the basics of the Ionic Open Source Framework and explains how to deal with its various components and sub-components. "},
{"Prerequisites": "Since Ionic is built on top of AngularJS and Apache Cordova, you will need to have basic knowledge about these technologies. You also need to be familiar with HTML, CSS and JavaScript, if you want to understand all the information provided. "},
{"Ionic - Overview": "Ionic is a front-end HTML framework built on top of AngularJS and Cordova. As per their official document, the definition of this Ionic Open Source Framework is as follows - Ionic is an HTML5 Mobile App Development Framework targeted at building hybrid mobile apps. Think of Ionic as the front-end UI framework that handles all the look and feel and UI interactions your app needs to be compelling. Kind of like \"Bootstrap for Native\", but with the support for a broad range of common native mobile components, slick animations and a beautiful design. "},
{"Ionic Framework Features": ["AngularJS - Ionic is using AngularJS MVC architecture for building rich single page applications optimized for mobile devices.", "CSS components - With the native look and feel, these components offer almost all elements that a mobile application needs. The components\u2019 default styling can be easily overridden to accommodate your own designs.", "JavaScript components - These components are extending CSS components with JavaScript functionalities to cover all mobile elements that cannot be done only with HTML and CSS.", "Cordova Plugins - Apache Cordova plugins offer API needed for using native device functions with JavaScript code.", "Ionic CLI - This is NodeJS utility powered with commands for starting, building, running and emulating Ionic applications.", "Ionic View - Very useful platform for uploading, sharing and testing your application on native devices.", "Licence - Ionic is released under MIT license."]},
{"Ionic Framework Advantages": ["Ionic is used for Hybrid App Development. This means that you can package your applications for IOS, Android, Windows Phone and Firefox OS, which can save you a lot of working time.", "Starting your app is very easy since Ionic provides useful pre-generated app setup with simple layouts.", "The apps are built in a very clean and modular way, so it is very maintainable and easy to update.", "Ionic Developers Team have a very good relationship with the Google Developers Team and they are working together to improve the framework. The updates are coming out regularly and Ionic support group is always willing to help when needed."]},
{"Ionic Framework Limitations": ["Testing can be tricky since the browser does not always give you the right information about the phone environment. There are so many different devices as well as platforms and you usually need to cover most of them.", "It can be hard to combine different native functionalities. There will be many instances where you would run into plugin compatibility issues, which leads to build errors that are hard to debug.", "Hybrid apps tend to be slower than the native ones. However, since the mobile technologies are improving fast this will not be an issue in the future."]},
{"Installing Cordova and Ionic": [{"para": "We will use the Windows command prompt for this tutorial. The same steps can be applied to the OSX terminal. Open your command window to install Cordova and Ionic \u2212", "command": "C:\\Users\\Username> npm install -g cordova ionic"}]},
{"Tabs App": [{"para": "If you want to use the Ionic tabs template, the app will be built with the tab menu, header and a couple of useful screens and functionalities. This is the default Ionic template. Open your command window and choose where you want to create your app.", "command": "C:\\Users\\Username> cd Desktop"}, {"para": "This command will change the working directory. The app will be created on the Desktop.", "command": "C:\\Users\\Username\\Desktop> ionic start myApp tabs"}, {"para": "Ionic Start command will create a folder named myApp and setup Ionic files and folders.", "command": "C:\\Users\\Username\\Desktop> cd myApp"}, {"para": "Now, we want to access the myApp folder that we just created. This is our root folder.Let us now add the Cordova project for the Android Platform and install the basic Cordova plugins as well. The following code allows us to run the app on the Android emulator or a device.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic platform add android"}, {"para": "The next step is to build the app. If you have building errors after running the following command, you probably did not install the Android SDK and its dependencies.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic build android"}, {"para": "The last step of the installation process is to run your app, which will start the mobile device, if connected, or the default emulator, if there is no device connected. Android Default Emulator is slow, so I suggest you to install Genymotion or some other popular Android Emulator.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic run android"}, {"para": "This will produce below result, which is an Ionic Tabs App.", "image": "https://www.tutorialspoint.com/ionic/images/tabs-app.jpg"}]},
{"Blank App": [{"para": "If you want to start from the scratch, you can install the Ionic blank template. We will use the same steps that have been explained above with the addition of ionic start myApp blank instead of ionic start myApp tabs as follows.", "command": "C:\\Users\\Username\\Desktop> ionic start myApp blank"}, {"para": "The Ionic Start command will create a folder named myApp and setup the Ionic files and folders.", "command": "C:\\Users\\Username\\Desktop> cd myApp"}, {"para": "Let us add the Cordova project for the Android Platform and install the basic Cordova plugins as explained above.", "command": "C:\\Users\\Username\\Desktop\\myApp>ionic platform add android"}, {"para": "The next step is to build our app \u2212", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic build android"}, {"para": "Finally, we will start the App as with the following code \u2212", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic run android"}, {"para": "This will produce the following result, which is a Ionic Blank App.", "image": "https://www.tutorialspoint.com/ionic/images/blank-app.jpg"}]},
{"Side Menu App": [{"para": "The third template that you can use is the Side Menu Template. The steps are the same as the previous two templates; we will just add sidemenu when starting our app as shown in the code below.", "command": "C:\\Users\\Username\\Desktop> ionic start myApp sidemenu"}, {"para": "The Ionic Start command will create a folder named myApp and setup the Ionic files and folders.", "command": "C:\\Users\\Username\\Desktop> cd myApp"}, {"para": "Let us add the Cordova project for the Android Platform and install the basic Cordova plugins with the code given below.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic platform add android"}, {"para": "The next step is to build our app with the following code.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic build android"}, {"para": "Finally, we will start the App with the code given below.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic run android"}, {"para": "This will produce the following result, which is an Ionic Side Menu App.", "image": "https://www.tutorialspoint.com/ionic/images/side-menu-app.jpg"}]},
{"Test App in Browser": [{"para": "Since we are working with the JavaScript, you can serve your app on any web browser. This will speed up your building process, but you should always test your app on native emulators and devices. Type the following code to serve your app on the web browser.", "command": "C:\\Users\\Username\\Desktop\\myApp> ionic serve"}]},
{"Ionic Color Classes": "Ionic framework gives us a set of nine predefined color classes. You can use these colors or you can override it with your own styling. "},
{"Ionic Color Usage": [{"para": "Ionic makes use of different classes for each element. For example, a header element will have bar class and a button will have a button class. To simplify the usage, we use different colors by prefixing element class in a color name.For example, to create a blue color header, we will use a bar-calm as follows \u2212", "command": "<div class = \"bar bar-header bar-calm\">   ...</div>"}, {"para": "Similarly, to create a grey color button, we will use button-stable class as follows.", "command": "<div class = \"button button-stable\">   ...</div>"}, {"para": "You can also use Ionic color class like any other CSS class. We will now style two paragraphs with a balanced (green) and an energized (yellow) color.", "command": "<p class = \"balanced\">Paragraph 1...</p><p class = \"energized\">Paragraph 2...</p>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/using-colors.jpg"}]},
{"Customizing Colors with CSS": "When you want to change some of the Ionic default colors using CSS, you can do it by editing the lib/css/ionic.css file. In some cases, this approach is not very productive because every element (header, button, footer...) uses its own classes for styling. Therefore, if you want to change the color of the \"light\" class to orange, you would need to search through all the elements that use this class and change it. This is useful when you want to change the color of a single element, but not very practical for changing color of all elements because it would use too much time. "},
{"Customizing colors using SASS": [{"para": "SASS (which is the short form of \u2013 Software as a Service) provides an easier way to change the color for all the elements at once. If you want to use SASS, open your project in the command window and type \u2212", "command": "C:\\Users\\Username\\Desktop\\tutorialApp> ionic setup sass"}, {"para": "This will set up SASS for your project. Now you can the change default colors by opening the scss/ionic.app.scss file and then typing in the following code before this line \u2013 @import \"www/lib/ionic/scss/ionic\";We will change the balanced color to dark blue and the energized color to orange. The two paragraphs that we used above are now dark blue and orange.", "command": "$balanced: #000066 !default;$energized: #FFA500 !default;"}, {"para": "Now, if you use the following example \u2212", "command": "<p class = \"balanced\">Paragraph 1...</p><p class = \"energized\">Paragraph 2...</p>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/colors-scss.jpg"}]},
{"Important Note": [{"para": "All the Ionic elements that are using these classes will change to dark blue and orange. Take into consideration that you do not need to use Ionic default color classes. You can always style elements the way you want.", "command": "<link href = \"css/style.css\" rel = \"stylesheet\">"}]},
{"Ionic - Content": [{"para": "Almost every mobile app contains some fundamental elements. Usually those elements include a header and a footer that will cover the top and the bottom part of the screen. All the other elements will be placed between these two. Ionic provides ion-content element that serves as a container that will wrap all the other elements that we want to create.This container has some unique characteristics, but since this is a JavaScript based component which we will cover in the later part of this tutorial.", "command": "<div class = \"bar bar-header\">    <h1 class = \"title\">Header</h1> </div> <div class = \"list\">    <label class = \"item item-input\">       <input type = \"text\" placeholder = \"Placeholder 1\" />    </label>      <label class = \"item item-input\">       <input type = \"text\" placeholder = \"Placeholder 2\" />    </label> </div><div class = \"bar bar-footer\">    <h1 class = \"title\">Footer</h1> </div>"}]},
{"Ionic - Header": "The Ionic header bar is located on top of the screen. It can contain title, icons, buttons or some other elements on top of it. There are predefined classes of headers that you can use. You can check all of it in this tutorial. "},
{"Adding Header": [{"para": "The main class for all the bars you might use in your app is bar. This class will always be applied to all the bars in your app. All bar subclasses will use the prefix \u2013 bar.If you want to create a header, you need to add bar-header after your main bar class. Open your www/index.html file and add the header class inside your body tag. We are adding a header to the index.html body because we want it to be available on every screen in the app.Since bar-header class has default (white) styling applied, we will add the title on top of it, so you can differentiate it from the rest of your screen.", "command": "<div class = \"bar bar-header\">   <h1 class = \"title\">Header</h1></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-header.jpg"}]},
{"Header Colors": [{"para": "If you want to style your header, you just need to add the appropriate color class to it. When you style your elements, you need to add your main element class as prefix to your color class. Since we are styling the header bar, the prefix class will be bar and the color class that we want to use in this example is positive (blue).", "command": "<div class = \"bar bar-header bar-positive\">   <h1 class = \"title\">Header</h1></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-header-color.jpg"}]},
{"Header Elements": [{"para": "We can add other elements inside the header. The following code is an example to add a menu button and a home button inside a header. We will also add icons on top of our header buttons.", "command": "<div class = \"bar bar-header bar-positive\">   <button class = \"button icon ion-navicon\"></button>   <h1 class = \"title\">Header Buttons</h1>   <button class = \"button icon ion-home\"></button></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-header-buttons.jpg"}]},
{"Sub Header": [{"para": "You can create a sub header that will be located just below the header bar. The following example will show how to add a header and a sub header to your app. Here, we have styled the sub header with an \"assertive\" (red) color class.", "command": "<div class = \"bar bar-header bar-positive\">   <button class = \"button icon ion-navicon\"></button>   <h1 class = \"title\">Header Buttons</h1>   <button class = \"button icon ion-home\"></button></div><div class = \"bar bar-subheader bar-assertive\">   <h2 class = \"title\">Sub Header</h2></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-sub-header.jpg"}, {"para": "When your route is changed to any of the app screens, you will notice that the header and the sub header are covering some content as shown in the screenshot below.", "image": "https://www.tutorialspoint.com/ionic/images/ionic-content-hidden.jpg"}, {"para": "To fix this you need to add a \u2018has-header\u2019 or a \u2018has-subheader\u2019 class to the ion-content tags of your screens. Open one of your HTML files from www/templates and add the has-subheader class to the ion-content. If you only use header in your app, you will need to add the has-header class instead.", "command": "<ion-content class = \"padding has-subheader\">"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-has-subheader.jpg"}]},
{"Ionic - Footer": "Ionic footer  is placed at the bottom of the app screen. Working with footers is almost the same as working with headers. "},
{"Adding Footer": [{"para": "The main class for Ionic footers is bar (the same as header). When you want to add footer to your screens, you need to add bar-footer class to your element after the main bar class. Since we want to use our footer on every screen in the app, we will add it to the body of the index.html file. We will also add title for our footer.", "command": "<div class = \"bar bar-footer\">   <h1 class = \"title\">Footer</h1></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-footer.jpg"}]},
{"Footer Colors": [{"para": "If you want to style your footer, you just need to add the appropriate color class to it. When you style your elements, you need to add your main element class as a prefix to your color class. Since we are styling a footer bar, the prefix class will be a bar and the color class that we want to use in this example is assertive (red).", "command": "<div class = \"bar bar-footer bar-assertive\">   <h1 class = \"title\">Footer</h1></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-footer-color.jpg"}]},
{"Footer Elements": [{"para": "Footers can contain elements inside it. Most of the time you will need to add buttons with icons inside a footer.The first button added will always be in the left corner. The last one will be placed on the right. The buttons in between will be grouped next to the first one on the left side of your footer. In following example, you can also notice that we use the icon class to add icons on top of the buttons.", "command": "<div class = \"bar bar-footer bar-assertive\">   <button class = \"button icon ion-navicon\"></button>   <button class = \"button icon ion-home\"></button>   <button class = \"button icon ion-star\"></button>   <button class = \"button icon ion-checkmark-round\"></button></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-footer-icons.jpg"}, {"para": "If you want to move your button to the right you can add pull-right class.", "command": "<div class = \"bar bar-footer bar-assertive\">   <button class = \"button icon ion-navicon pull-right\"></button></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-footer-icon-right.jpg"}]},
{"Ionic - Buttons": "There are several types of buttons in the Ionic Framework and these buttons are subtly animated, which further enhances the user experience when using the app. The main class for all the button types is button. This class will always be applied to our buttons, and we will use it as a prefix when working with sub classes. "},
{"Block Buttons": [{"para": "Block buttons will always have 100% width of their parent container. They will also have a small padding applied. You will use button-block class for adding block buttons. If you want to remove padding but keep the full width, you can use the button-full class.Following is an example to show the usage of both classes \u2212", "command": "<button class = \"button button-block\">   button-block</button><button class = \"button button-full\">   button-full</button>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/button-block-full.jpg"}]},
{"Button Size": [{"para": "Following is an example to show their usage \u2212", "command": "<button class = \"button button-small\">   button-small</button><button class = \"button button-large\">   button-large</button>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/button-small-large.jpg"}]},
{"Button Colors": [{"para": "If you want to style your button, you just need to add appropriate color class to it. When you style your elements, you need to add your main element class as a prefix to your color class. Since we are styling the footer bar, the prefix class will be a bar and the color class that we want to use in this example is assertive (red).", "command": "<button class = \"button button-assertive\">   button-assertive</button>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-button-color.jpg"}]},
{"Button Outline": [{"para": "If you want your buttons transparent, you can apply button-outline class. Buttons with this class will have an outline border and a transparent background.To remove the border from the button, you can use the button-clear class. The following example shows how to use these two classes.", "command": "<button class = \"button button-assertive button-outline\">   button-outline</button><button class = \"button button-assertive button-clear\">   button-clear</button>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/button-outline-clear.jpg"}]},
{"Adding Icons": [{"para": "When you want to add Icons to your buttons, the best way is to use the icon class. You can place the icon on one side of the button by using the icon-left or the icon-right. You will usually want to move your icon to one side when you have some text on top of your button as explained below.", "command": "<button class = \"button icon ion-home\"></button><button class = \"button icon icon-left ion-home\">   Home</button><button class = \"button icon icon-right ion-home\">   Home</button>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-button-icons.jpg"}]},
{"Button Bar": [{"para": "If you want to group a couple of buttons together, you can use the button-bar class. The buttons will have equal size by default.", "command": "<div class = \"button-bar\">   <a class = \"button button-positive\">1</a>   <a class = \"button button-assertive\">2</a>   <a class = \"button button-energized\">3</a>   <a class = \"button\">4</a></div> "}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-button-bar.jpg"}]},
{"Ionic - Lists": "Lists are one of the most popular elements of any web or mobile application. They are usually used for displaying various information. They can be combined with other HTML elements to create different menus, tabs or to break the monotony of pure text files. Ionic framework offers different list types to make their usage easy. "},
{"Creating Ionic List": [{"para": "Every list is created with two elements. When you want to create a basic list your &lt;ul&gt; tag needs to have the list class assigned, and your &lt;li&gt; tag will use the item class. Another interesting thing is that you do not even need to use &lt;ul&gt;, &lt;ol&gt; and &lt;li&gt; tags for your lists. You can use any other elements, but the important thing is to add list and item classes appropriately.", "command": "<div class = \"list\">   <div class = \"item\">Item 1</div>   <div class = \"item\">Item 2</div>   <div class = \"item\">Item 3</div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-list.jpg"}]},
{"Inset List": [{"para": "When you need a list to fill your own container, you can add the list-insets after your list class. This will add some margin to it and it will adjust the list size to your container.", "command": "<div class = \"list list-inset\">   <div class = \"item\">Item 1</div>   <div class = \"item\">Item 2</div>   <div class = \"item\">Item 3</div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-list-inset.jpg"}]},
{"Item Dividers": [{"para": "Dividers are used for organizing some elements into logical groups. Ionic gives us item-divider class for this. Again, like with all the other Ionic elements, we just need to add the item-divider class after the item class. Item dividers are useful as a list header, since they have stronger styling than the other list items by default.", "command": "<div class = \"list\">   <div class = \"item item-divider\">Item Divider 1</div>   <div class = \"item\">Item 1</div>   <div class = \"item\">Item 2</div>   <div class = \"item\">Item 3</div>   <div class = \"item item-divider\">Item Divider 2</div>   <div class = \"item\">Item 4</div>   <div class = \"item\">Item 5</div>   <div class = \"item\">Item 6</div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-item-divider.jpg"}]},
{"Adding Icons": [{"para": "We already showed you how to add icons to your buttons. When adding icons to the list items, you need to choose what side you want to place them. There are item-icon-left and item-icon-right classes for this. You can also combine those two classes, if you want to have your Icons on both the sides. Finally, there is the item-note class to add a text note to your item.", "command": "<div class = \"list\">   <div class = \"item item-icon-left\">      <i class = \"icon ion-home\"></i>      Left side Icon   </div>   <div class = \"item item-icon-right\">      <i class = \"icon ion-star\"></i>      Right side Icon   </div>   <div class = \"item item-icon-left item-icon-right\">      <i class = \"icon ion-home\"></i>      <i class = \"icon ion-star\"></i>      Both sides Icons   </div>      <div class = \"item item-icon-left\">      <i class = \"icon ion-home\"></i>      <span class = \"text-note\">Text note</span>   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-item-icons.jpg"}]},
{"Adding Avatars and Thumbnails": [{"para": "Avatars and thumbnails are similar. The main difference is that avatars are smaller than thumbnails. These thumbnails are covering most of the full height of the list item, while avatars are medium sized circle images. The classes that are used are item-avatar and item-thumbnail. You can also choose which side you want to place your avatars and thumbnails as shown in the thumbnail code example below.", "command": "<div class = \"list\">   <div class = \"item item-avatar\">      <img src = \"my-image.png\">      <h3>Avatar</h3>   </div>   <div class = \"item item-thumbnail-left\">      <img src = \"my-image.png\">      <h3>Thumbnail</h3>   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-avatar-thumbnail.jpg"}]},
{"Ionic - Cards": "Since mobile devices have smaller screen size, cards are one of the best elements for displaying information that will feel user friendly. In the previous chapter, we have discussed how to inset lists. Cards are very similar to inset lists, but they offer some additional shadowing that can influence the performance for larger lists. "},
{"Adding Cards": [{"para": "A default card can be created by adding a card class to your element. Cards are usually formed as lists with the item class. One of the most useful class is the item-text-wrap. This will help when you have too much text, so you want to wrap it inside your card. The first card in the following example does not have the item-text-wrap class assigned, but the second one is using it.", "command": "<div class = \"card\">   <div class = \"item\">      This is a Ionic card without item-text-wrap class.   </div>      <div class = \"item item-text-wrap\">      This is a Ionic card with item-text-wrap class.   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-cards.jpg"}]},
{"Card Header and Footer": [{"para": "In the previous chapter, we have already discussed how to use the item-divider class for grouping lists. This class can be very useful when working with cards to create card headers. The same class can be used for footers as shown in the following code \u2212", "command": "<div class = \"card list\">   <div class = \"item item-divider\">      Card header   </div>      <div class = \"item item-text-wrap\">      Card text...   </div>      <div class = \"item item-divider\">      Card Footer   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-card-elements.jpg"}]},
{"Complete Card": [{"para": "You can add any element on top of your card. In following example, we will show you how to use the full-image class together with the item-body to get a good-looking windowed image inside your card.", "command": "<div class = \"card\">   <div class = \"item item-avatar\">      <img src = \"my-image.png\">      <h2>Card Name</h2>   </div>   <div class = \"item item-body\">      <img class = \"full-image\" src = \"my-image.png\">      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget       pharetra tortor. Proin quis eros imperdiet, facilisis nisi in, tincidunt orci.       Nam tristique elit massa, quis faucibus augue finibus ac.   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-complete-card.jpg"}]},
{"Ionic - Forms": "Ionic forms are mostly used for interaction with users and collecting needed info. This chapter will cover various text input forms and in our subsequent chapters, we will explain how to use other form elements using the Ionic framework. "},
{"Using Input Form": [{"para": "The best way to use forms is to use list and item as your main classes. Your app will usually consist more than one-form element, so it makes sense to organize it as a list. In the following example, you can notice that the item element is a label tag.You can use any other element, but a label will provide the ability to tap on any part of the element to focus your text input. You can set a placeholder that will look different from the input text and it will be hidden as soon as you start typing. You can see this in the example below.", "command": "<div class = \"list\">   <label class = \"item item-input\">      <input type = \"text\" placeholder = \"Placeholder 1\" />   </label>   <label class = \"item item-input\">      <input type = \"text\" placeholder = \"Placeholder 2\" />   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-form-input.jpg"}]},
{"Ionic Labels": [{"para": "Ionic offers some other options for your label. You can use the input-label class, if you want your placeholder to be on the left side when you type the text.", "command": "<div class = \"list\">   <label class = \"item item-input\">      <input type = \"text\" placeholder = \"Placeholder 1\" />   </label>   <label class = \"item item-input\">      <input type = \"text\" placeholder = \"Placeholder 2\" />   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-input-label.jpg"}]},
{"Stacked Label": [{"para": "Stacked label is the other option that allows moving your label on top or the bottom of the input. To achieve this, we will add the item-stacked-label class to our label element and we need to create a new element and assign the input-label class to it. If we want it to be on top, we just need to add this element before the input tag. This is shown in the following example.Notice that the span tag is before the input tag. If we changed their places, it would appear below it on the screen.", "command": "<div class = \"list\">   <label class = \"item item-input item-stacked-label\">      <span class = \"input-label\">Label 1</span>      <input type = \"text\" placeholder = \"Placeholder 1\" />   </label>   <label class = \"item item-input item-stacked-label\">      <span class = \"input-label\">Label 2</span>      <input type = \"text\" placeholder = \"Placeholder 2\" />   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-stacked-label.jpg"}]},
{"Floating Label": [{"para": "Floating labels are the third option we can use. These labels will be hidden before we start typing. As soon the typing starts, they will appear on top of the element with nice floating animation. We can use floating labels the same way as we used stacked labels. The only difference is that this time we will use item-floating-label class.", "command": "<div class = \"list\">   <label class = \"item item-input item-floating-label\">      <span class = \"input-label\"t>Label 1</span>      <input type = \"text\" placeholder = \"Placeholder 1\" />   </label>   <label class = \"item item-input item-floating-label\">      <span class = \"input-label\">Label 2</span>      <input type = \"text\" placeholder = \"Placeholder 2\" />   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-floating-label.jpg"}]},
{"Inset inputs": [{"para": "In our last chapter, we discussed how to inset Ionic elements. You can also inset an input by adding the item-input-inset class to your item and the item-input-wrapper to your label. A Wrapper will add additional styling to your label.If you add some other elements next to your label, the label size will adjust to accommodate the new element. You can also add elements inside your label (usually icons).The following example shows two inset inputs. The first one has a button next to the label, and the second one has an icon inside it. We used the placeholder-icon class to make the icon with the same color as the placeholder text. Without it, the icon would use the color of the label.", "command": "<div class = \"list\">   <div class = \"item item-input-inset\">      <label class = \"item item-input-wrapper\">\t\t         <input type = \"text\" placeholder = \"Placeholder 1\" />      </label>      <button class = \"button\">button</button>   </div>   <div class = \"item item-input-inset\">      <label class = \"item item-input-wrapper\">         <i class = \"icon ion-edit placeholder-icon\"></i>         <input type = \"text\" placeholder = \"Placeholder 2\" />      </label>   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-inset-input.jpg"}]},
{"Using Toggle": [{"para": "Toggle can be implemented using two Ionic classes. First, we need to create a label for the same reason we explained in the previous chapter and assign a toggle class to it.Inside our label will be created . You will notice two more ionic classes used in the following example. The track class will add background styling to our checkbox and color animation when the toggle is tapped. The handle class is used to add a circle button to it.The following example shows two toggle forms. The first one is checked, the second one is not.", "command": "<label class = \"toggle\">   <input type = \"checkbox\" />   <div class = \"track\">      <div class = \"handle\"></div>   </div></label><br><label class = \"toggle\">   <input type = \"checkbox\" />   <div class = \"track\">      <div class = \"handle\"></div>   </div></label>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-toggle.jpg"}]},
{"Multiple Toggles": [{"para": "Most of the time when you want to add more than one element of the same kind in Ionic, the best way is to use list items. The class that is used for multiple toggles is the item-toggle. The next example shows how to create a list for toggles. The first one and the second one are checked.", "command": "<ul class = \"list\">   <li class = \"item item-toggle\">      Toggle 1      <label class = \"toggle\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle 2      <label class = \"toggle\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle 3      <label class = \"toggle\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle 4      <label class = \"toggle\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li></ul>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-toggle-list.jpg"}]},
{"Styling Toggle": [{"para": "All the Ionic color classes can be applied to the toggle element. The Prefix will be the toggle. We will apply this to the label element. The following example shows all the colors that are applied.", "command": "<ul class = \"list\">   <li class = \"item item-toggle\">      Toggle Light      <label class = \"toggle  toggle-light\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Stable      <label class = \"toggle toggle-stable\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Positiv>      <label class = \"toggle toggle-positive\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Calm      <label class = \"toggle toggle-calm\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Balanced      <label class = \"toggle toggle-balanced\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Energized      <label class = \"toggle toggle-energized\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Assertive      <label class = \"toggle toggle-assertive\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Royal      <label class = \"toggle  toggle-royal\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li>   <li class = \"item item-toggle\">      Toggle Dark      <label class = \"toggle toggle-dark\">         <input type = \"checkbox\" />         <div class = \"track\">            <div class = \"handle\"></div>         </div>      </label>   </li></ul>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-toggle-color.jpg"}]},
{"Ionic - Checkbox": "Ionic checkbox is almost the same as toggle. These two are styled differently but are used for the same purposes. "},
{"Adding Checkbox": [{"para": "When creating a checkbox form, you need to add the checkbox class name to both label and the input elements. The following example shows two simple checkboxes, one is checked and the other is not.", "command": "<label class = \"checkbox\">   <input type = \"checkbox\"></label><label class = \"checkbox\">   <input type = \"checkbox\"></label>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-checkbox.jpg"}]},
{"Multiple Checkboxes": [{"para": "As we already showed, the list will be used for multiple elements. Now we will use the item-checkbox class for each list item.", "command": "<ul class = \"list\">   <li class = \"item item-checkbox\">      Checbox 1      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox\">      Checkbox 2      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox\">      Checkbox e      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox\">      Checkbox 4      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li></ul>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-checkbox-list.jpg"}]},
{"Styling Checkbox": [{"para": "When you want to style a checkbox, you need to apply any Ionic color class with the checkbox prefix. Check the following example to see how it looks like. We will use the list of checkboxes for this example.", "command": "<ul class = \"list\">   <li class = \"item item-checkbox checkbox-light\">      Checbox 1      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox checkbox-stable\">      Checkbox 2      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-positive\">      Checkbox 3      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-calm\">      Checkbox 4      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-balanced\">      Checkbox 5      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-energized\">      Checkbox 6      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-assertive\">      Checkbox 7      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-royal\">      Checkbox 8      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li>   <li class = \"item item-checkbox  checkbox-dark\">      Checkbox 9      <label class = \"checkbox\">         <input type = \"checkbox\" />      </label>   </li></ul>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-checkbox-color.jpg"}]},
{"Ionic - Radio Button": "Radio buttons are another form of an element, which we will be covering in this chapter. The difference between radio buttons from toggle and checkbox forms is that when using the former, you choose only one radio button from the list. As the latter allows you to choose more than one. "},
{"Adding Radio Buttons": [{"para": "Since there will always be more than one radio button to choose from, the best way is to create a list. We did this whenever we wanted multiple elements. The list item class will be item-radio. Again, we will use label for this as we have used with all the other forms. Input will have the name attribute. This attribute will group all the buttons that you want to use as a possible choice. The item-content class is used to display options clearly. At the end, we will use the radio-icon class to add the checkmark icon that will be used to mark the option that the user chooses.In the following example, there are four radio buttons and the second one is chosen.", "command": "<div class = \"list\">   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group1\" />      <div class = \"item-content\">         Choice 1      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group1\" />      <div class = \"item-content\">         Choice 2      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group1\" />      <div class = \"item-content\">         Choice 3      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group1\" />      <div class = \"item-content\">         Choice 4      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-radio-button.jpg"}]},
{"Multiple Radio Button Groups": [{"para": "Sometimes you want to create more than one group. This is what the name attribute is made for; the following example will group the first two and the last two buttons as two option groups.We will use the item-divider class to separate two groups. Notice that the first group has the name attribute equal to group1 and the second one uses group2.", "command": "<div class = \"list\">   <div class = \" item item-divider\">      Group1   </div>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group1\" />      <div class = \"item-content\">         Choice 1      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group1\" />      <div class = \"item-content\">         Choice 2      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label>   <div class = \" item item-divider\">      Group2   </div>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group2\" />      <div class = \"item-content\">         Choice 3      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label>   <label class = \"item item-radio\">      <input type = \"radio\" name = \"group2\" />      <div class = \"item-content\">         Choice 4      </div>      <i class = \"radio-icon ion-checkmark\"></i>   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-radio-button-groups.jpg"}]},
{"Ionic - Range": "Ionic range is used to choose and display the level of something. It will represent the actual value in co-relation to maximal and minimal value. Ionic offers a simple way of working with Range. "},
{"Using Range": [{"para": "Range is used as an inside item element. The class that is used is range. We will place this class after the item class. This will prepare a container where the range will be placed. After creating a container, we need to add input and assign the range type to it and the name attribute as well.", "command": "<div class = \"item range\">   <input type = \"range\" name = \"range1\"></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/range.jpg"}]},
{"Adding Icons": [{"para": "Range will usually require icons to display the data clearly. We just need to add icons before and after the range input to place them on both sides of the range element.", "command": "<div class = \"item range\">   <i class = \"icon ion-volume-low\"></i>   <input type = \"range\" name = \"volume\">   <i class = \"icon ion-volume-high\"></i></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/range-icon.jpg"}]},
{"Styling Range": [{"para": "Our next example will show you how to style Range with Ionic colors. The color classes will use a range prefix. We will create a list with nine ranges and style it differently.", "command": "<div class = \"list\">   <div class = \"item range range-light\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-stable\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-positive\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-calm\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-balanced\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-energized\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-assertive\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-royal\">      <input type = \"range\" name = \"volume\">   </div>\t   <div class = \"item range range-dark\">      <input type = \"range\" name = \"volume\">   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/range-colors.jpg"}]},
{"Ionic - Select": "Ionic Select will create a simple menu with select options for the user to choose. This Select Menu will look differently on different platforms, since its styling is handled by the browser. "},
{"Using Select": [{"para": "First, we will create a label and add the item-input and the item-select classes. The second class will add additional styling to the select form and then we will add the input-label class inside that will be used to add a name to our select element. We will also add select with option inside. This is regular HTML5 select element. The following example is showing Ionic Select with three options.", "command": "<label class = \"item item-input item-select\">   <div class = \"input-label\">      Select   </div>\t   <select>      <option>Option 1</option>      <option selected>Option 2</option>      <option>Option 3</option>   </select></label>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/select.jpg"}]},
{"Styling Select": [{"para": "The following example will show you how to apply styling to select. We are creating a list with nine differently styled select elements using Ionic colors. Since we are using list with items, item will be the prefix to the color classes.", "command": "<div class = \"list\">   <label class = \"item item-input item-select item-light\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>\t\t   </label>   <label class = \"item item-input item-select item-stable\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-positive\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-calm\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-balanced\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-energized\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-assertive\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-royal\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label>   <label class = \"item item-input item-select item-dark\">      <div class = \"input-label\">         Select      </div>\t\t      <select>         <option>Option 1</option>         <option selected>Option 2</option>         <option>Option 3</option>      </select>   </label></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/select-color.jpg"}]},
{"Ionic - Tabs": "Ionic tabs are most of the time used for mobile navigation. Styling is optimized for different platforms. This means that on android devices, tabs will be placed at the top of the screen, while on IOS it will be at the bottom. There are different ways of creating tabs. We will understand in detail, how to create tabs in this chapter. "},
{"Simple Tabs": [{"para": "Simple Tabs menu can be created with a tabs class. For the inside element that is using this class, we need to add tab-item elements. Since tabs are usually used for navigation, we will use &lt;a&gt; tags for tab items. The following example is showing a menu with four tabs.", "command": "<div class = \"tabs\">   <a class = \"tab-item\">      Tab 1   </a>\t   <a class = \"tab-item\">      Tab 2   </a>   <a class = \"tab-item\">      Tab 3   </a></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/tabs.jpg"}]},
{"Adding Icons": [{"para": "Ionic provides classes for adding icons to tabs. If you want your tabs to have icons without any text, a tabs-icon-only class should be added after the tabs class. Of course, you need to add icons you want to display.", "command": "<div class = \"tabs tabs-icon-only\">   <a class = \"tab-item\">      <i class = \"icon ion-home\"></i>   </a>\t   <a class = \"tab-item\">      <i class = \"icon ion-star\"></i>   </a>\t   <a class = \"tab-item\">      <i class = \"icon ion-planet\"></i>   </a></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/tabs-icon.jpg"}, {"para": "You can also add icons and text together. The tabs-icon-top and tabs-icon-left are classes that will place the icon above or on the left side respectively. Implementation is the same as the example given above, we will just add a new class and text that we want to use. The following example shows icons placed above the text.", "command": "<div class = \"tabs tabs-icon-top\">   <a class = \"tab-item\">      <i class = \"icon ion-home\"></i>      Tab 1   </a>\t   <a class = \"tab-item\">      <i class = \"icon ion-star\"></i>      Tab 2   </a>\t   <a class = \"tab-item\">      <i class = \"icon ion-planet\"></i>      Tab 3   </a></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/tabs-icon-top.jpg"}]},
{"Striped Tabs": [{"para": "Striped Tabs can be created by adding a container around our tabs with the tabs-striped class. This class allows the usage of the tabs-background and the tabs-color prefixes for adding some of the Ionic colors to the tabs menu.In the following example, we will use the tabs-background-positive (blue) class to style the background of our menu, and the tabs-color-light (white) class to style the tab icons. Notice the difference between the second tab that is active and the other two that are not.", "command": "<div class = \"tabs-striped tabs-background-positive tabs-color-light\">   <div class = \"tabs\">      <a class = \"tab-item\">         <i class = \"icon ion-home\"></i>      </a>\t\t      <a class = \"tab-item active\">         <i class = \"icon ion-star\"></i>      </a>\t\t      <a class = \"tab-item\">         <i class = \"icon ion-planet\"></i>      </a>   </div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/tabs-striped.jpg"}]},
{"Ionic - Grid": "Working with the Ionic Grid System is straightforward. There are two main classes \u2013 row for working with rows and col for columns. You can choose as many columns or rows you want. All of them will adjust its size to accommodate the available space, although you can change this behavior to suit your needs. "},
{"Simple Grid": [{"para": "The following example shows how to use the col and the row classes. We will create two rows. The first row will have five columns and the second one will have only three. Notice how the width of the columns is different in the first and second row.", "command": "<div class = \"row\">   <div class = \"col\">col 1</div>   <div class = \"col\">col 2</div>   <div class = \"col\">col 3</div>   <div class = \"col\">col 4</div>   <div class = \"col\">col 5</div></div><div class = \"row\">   <div class = \"col\">col 1</div>   <div class = \"col\">col 2</div>   <div class = \"col\">col 3</div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/grid.jpg"}]},
{"Column Sizes": [{"para": "Sometimes you do not want to leave the column sizes automatically assigned. If this is the case, you can choose the col prefix followed by a number that will represent a percentage of the row width. This will apply only to the column with a specific size applied. The other columns will adjust to the available space that is left.In the following example, the first column will use 50 percent of the full width and the others will adjust accordingly.", "command": "<div class = \"row\">   <div class = \"col col-50\">col 1</div>   <div class = \"col\">col 2</div>   <div class = \"col\">col 3</div>   <div class = \"col\">col 4</div>   <div class = \"col\">col 5</div></div><div class = \"row\">   <div class = \"col col-50\">col 1</div>   <div class = \"col\">col 2</div>   <div class = \"col\">col 3</div></div>"}, {"para": "The above code will produce following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/grid-column-size.jpg"}]},
{"Horizontal and Vertical Positioning": [{"para": "The columns can be offset from the left. It works the same for the specific size of the columns. This time the prefix will be col-offset and then we will use the same percentage numbers showed in the table above. The following example shows how can we offset the second column of both the rows by 25 percent.", "command": "<div class = \"row\">   <div class = \"col\">col 1</div>   <div class = \"col col-offset-25\">col 2</div>   <div class = \"col\">col 3</div>   <div class = \"col\">col 4</div>   <div class = \"col\">col 5</div></div><div class = \"row\">   <div class = \"col\">col 1</div>   <div class = \"col col-offset-25\">col 2</div>   <div class = \"col\">col 3</div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/grid-offset.jpg"}, {"para": "You can also vertically align the columns inside a row. There are three classes, which can be used, namely \u2013 top, center and the bottom class with the col prefix. The following code shows how to place vertically the first three columns of both rows.NOTE \u2212 In the example that follows we added \u201c.col {height: 120px}\u201d to our CSS to show you the vertical placing of the columns.", "command": "<div class = \"row\">   <div class = \"col col-top\">col 1</div>   <div class = \"col col-center\">col 2</div>   <div class = \"col col-bottom\">col 3</div>   <div class = \"col\">col 4</div>   <div class = \"col\">col 5</div></div><div class = \"row\">   <div class = \"col col-top\">col 1</div>   <div class = \"col col-center\">col 2</div>   <div class = \"col col-bottom\">col 3</div></div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/grid-vertical.jpg"}]},
{"Responsive Grid": [{"para": "The Ionic Grid can also be used for a responsive layout. There are three classes available. The responsive-sm class will collapse columns into a single row when the viewport is smaller than a landscape phone. The responsive-md class will be applied when viewport is smaller than a portrait tablet. The responsive-lg class will be applied when viewport is smaller than a landscape tablet.The first image after the following example shows how the responsive-sm class looks on a Mobile device and the second one shows how the same responsive grid looks differently on a Tablet device.", "command": "<div class = \"row responsive-sm\">   <div class = \"col col-25\">col 1</div>   <div class = \"col\">col 2</div>   <div class = \"col\">col 3</div>   <div class = \"col\">col 4</div>   <div class = \"col\">col 5</div></div><div class = \"row responsive-sm\">   <div class = \"col\">col 1</div>   <div class = \"col\">col 2</div>   <div class = \"col\">col 3</div></div>"}]},
{"Ionic - Icons": "There are more than 700 premium icons provided by Ionic. There are also different sets of icons provided for Android and IOS. You can find almost anything you need but you are not bound to use them, if you do not want to. You can use your own custom icons or any other icon set instead. You can check all the Ionic icons here. "},
{"How to use Icons?": [{"para": "If you want to use Ionic icons find the icon you need on the page (http://ionicons.com/). When you are adding Ionic elements, you always add the main class first and then you add the subclass you want. The main class for all icons is icon. The Subclass is the name of the icon you want. We will add six icons in our example that is given below \u2212", "command": "<i class = \"icon icon ion-happy-outline\"></i><i class = \"icon icon ion-star\"></i><i class = \"icon icon ion-compass\"></i><i class = \"icon icon ion-planet\"></i><i class = \"icon icon ion-ios-analytics\"></i><i class = \"icon icon ion-ios-eye\"></i>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-icons.jpg"}, {"para": "The size of these icons can be changed with the font-size property in your Ionic CSS file.", "command": ".icon {   font-size: 50px;}"}, {"para": "Once the icon size is setup, the same code will produce the following screenshot as the output \u2212", "image": "https://www.tutorialspoint.com/ionic/images/ionic-big-icons.jpg"}]},
{"Ionic - Padding": "Ionic offers an easy way to add padding to elements. There are couple of classes that can be used and all of them will add 10px between border of element and its content. The following table displays all the available padding classes. "},
{"Using Padding": [{"para": "When you want to apply some padding to your element, you just need to assign one of the classes from the table above. The following example shows two block buttons. The first one is using the padding class and the second one does not. You will notice that the first button is larger, since it has 10px padding applied.", "command": "<div class = \"button button-block padding\">Padding</div><div class = \"button button-block\">No padding</div>"}, {"para": "The above code will produce the following screen \u2212", "image": "https://www.tutorialspoint.com/ionic/images/padding.jpg"}]}
]